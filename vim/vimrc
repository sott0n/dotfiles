" Install vim-plug if not yet installed
if empty(glob('~/.config/nvim/autoload/plug.vim'))
    silent !curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs
      \ https://raw.github.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

""""""""""""""""""""""""""""""
" Specify a directory for plugins
" - For Neovim: stdpath('data') . '/plugged'
" - Avoid using standard Vim directory names like 'plugin'
""""""""""""""""""""""""""""""
call plug#begin('~/.config/nvim/plugged')

Plug 'vim-airline/vim-airline'
Plug 'ulwlu/elly.vim'
Plug 'Shougo/neomru.vim'
Plug 'Shougo/unite.vim'
Plug 'justmao945/vim-clang'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'mileszs/ack.vim'
Plug 'tpope/vim-unimpaired'
Plug 'junegunn/vim-easy-align'
Plug 'honza/vim-snippets'
Plug 'scrooloose/nerdtree'
Plug 'fatih/vim-go'
Plug 'nsf/gocode'
Plug 'easymotion/vim-easymotion'
Plug 'rust-lang/rust.vim'
Plug 'prabirshrestha/vim-lsp'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'
Plug 'mattn/vim-lsp-settings'
Plug 'mattn/vim-lsp-icons'
Plug 'hrsh7th/vim-vsnip'
Plug 'sheerun/vim-polyglot'
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate', }
Plug 'https://github.com/adamheins/vim-highlight-match-under-cursor'
Plug 'rhysd/vim-clang-format'

" For llvm/mlir
" https://github.com/llvm/llvm-project/tree/main/llvm/utils/vim
" https://github.com/llvm/llvm-project/tree/main/mlir/utils/vim
Plug '~/.config/nvim/plugged/llvm'
Plug '~/.config/nvim/plugged/mlir'

call plug#end()

""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""
" Color scheme
" https://github.com/ulwlu/elly.vim
""""""""""""""""""""""""""""""
syntax enable
colorscheme elly
if has('termguicolors')
  set termguicolors
endif

""""""""""""""""""""""""""""""
" Set parameters
""""""""""""""""""""""""""""""
set number                      " Row numbers
set title                       " File title
set smartindent                 " Apply same indent from last row
set wildmenu                    " Activate automaticaly complement
set wildmode=list:longest,full  " Open a menu of complement after matching longest
set tags=./.tags;,.tags;        " Target tags path
set virtualedit=onemore         " Move end of row
set autoindent                  " Respect indentation when starting a new line.
set expandtab                   " Expand tabs to spaces. Essential in Python.
set tabstop=4                   " Number of spaces tab is counted for.
set shiftwidth=4                " Number of spaces to use for autoindent.
set backspace=2                 " Fix backspace behavior on most terminals.
set fileformats=unix,dos,mac
set fileencodings=utf-8,sjis
set noswapfile                  " No set swap file
set hlsearch                    " Highlight of search
set incsearch                   " Move automaticaly hit word by search
set ruler                       " Display a place of cursor
set cmdheight=2                 " Cmd row number
set laststatus=2                " Display a status line
set showcmd                     " Display cmd now
set cursorline                  " Display cursor row
set hidden                      " It can open other file if it exists not saved files
set list                        " Display a char that is not seeing
set listchars=tab:>\ ,extends:< " Visualize the continuation of tabs and lines
set showmatch                   " Show corresponding brackets or braces
set whichwrap=b,s,h,l,<,>,[,]   " Don't stop the cursor at the beggining of end of a line
set clipboard&                  " Set clipboard value of option into default
set clipboard^=unnamedplus      " Clipboard
set cmdheight=1                 " Heigh of status line


" Statsu line info
set statusline=%<%f\ %m%r%h%w%{'['.(&fenc!=''?&fenc:&enc).']['.&ff.']'}%=%l,%c%V%8P
" Display a branch of git at status line
set statusline+=%{fugitive#statusline()}

" undo dir
set undofile
if !isdirectory(expand("$HOME/.config/nvim/undodir"))
    call mkdir(expand("$HOME/.config/nvim/undodir"), "p")
endif
set undodir=$HOME/.config/nvim/undodir

packloadall                     " Load all plugins
silent! helptags ALL            " Load help file for all plugings

" shortcut key to move splited windows
noremap <c-h> <c-w><c-h>
noremap <c-l> <c-w><c-l>
noremap <c-j> <c-w><c-j>
noremap <c-k> <c-w><c-k>

" Map a leader key as Space key
let mapleader = "\<space>"

" Mapping NERDTreeToggle
noremap <leader>n :NERDTreeToggle<cr>

" Close buffer without closing window
command! Bd :bp | :sp | :bn | :bd       

" Close automaticaly when a last window is NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") &&
    \ b:NERDTree.isTabTree()) | q | endif

" Mapping `CtrlPBuffer` to Ctrl-b
nnoremap <C-b> :CtrlPBuffer<cr>        

" Mapping `No highlight` to double ESC
nnoremap <ESC><ESC> :nohl<CR>

" Mapping `:LspDefinition` to jump definition
nnoremap <expr> <silent> <C-]> execute(':LspDefinition') =~ "not supported" ? "\<C-]>" : ":echo<cr>"


" Set python path to pass checkhealth in neovim
let g:python_host_prog=$PYENV_ROOT.'/versions/2.7.15/bin/python'
let g:python3_host_prog=$PYENV_ROOT.'/versions/3.8.0/bin/python'

" Set clang options for vim-clang
let g:clang_c_options = '-std=c11'
let g:clang_cpp_options = '-std=c++1z -stdlib=libc++ --pedantic-errors'

" Change highlight of match paren
hi MatchParen ctermbg=3


""""""""""""""""""""""""""""""
" Setting Unt.vim
"
""""""""""""""""""""""""""""""
" Start insert mode
let g:unite_enable_start_insert=1
" List of buffer
noremap <C-P> :Unite buffer<CR>
" List of files
noremap <C-N> :Unite -buffer-name=file file<CR>
" List of files used recently
noremap <C-Z> :Unite file_mru<CR>
" Sources is directory where it opend a file now
noremap :uff :<C-u>UniteWithBufferDir file -buffer-name=file<CR>


""""""""""""""""""""""""""""""
" Change color when mode is insert
"
"  - https://sites.google.com/site/fudist/Home/vim-nihongo-ban/-vimrc-sample
""""""""""""""""""""""""""""""
let g:hi_insert = 'highlight StatusLine guifg=darkblue guibg=darkyellow gui=none ctermfg=blue ctermbg=yellow cterm=none'

if has('syntax')
  augroup InsertHook
    autocmd!
    autocmd InsertEnter * call s:StatusLine('Enter')
    autocmd InsertLeave * call s:StatusLine('Leave')
  augroup END
endif

let s:slhlcmd = ''
function! s:StatusLine(mode)
  if a:mode == 'Enter'
    silent! let s:slhlcmd = 'highlight ' . s:GetHighlight('StatusLine')
    silent exec g:hi_insert
  else
    highlight clear StatusLine
    silent exec s:slhlcmd
  endif
endfunction

function! s:GetHighlight(hi)
  redir => hl
  exec 'highlight '.a:hi
  redir END
  let hl = substitute(hl, '[\r\n]', '', 'g')
  let hl = substitute(hl, 'xxx', '', '')
  return hl
endfunction


""""""""""""""""""""""""""""""
" Set bracket or quote automaticaly
"
""""""""""""""""""""""""""""""
inoremap " ""<esc>i
inoremap ( ()<esc>i
inoremap { {}<esc>i
inoremap [ []<esc>i

" Start at last cursor place
if has("autocmd")
    autocmd BufReadPost *
    \ if line("'\"") > 0 && line ("'\"") <= line("$") |
    \   exe "normal! g'\"" |
    \ endif
endif


""""""""""""""""""""""""""""""
" Start at last cursor place
"
""""""""""""""""""""""""""""""
function! s:execute_ctags() abort
  let tag_name = '.tags'
  let tags_path = findfile(tag_name, '.;')
  if tags_path ==# ''
    return
  endif

  let tags_dirpath = fnamemodify(tags_path, ':p:h')
  execute 'silent !cd' tags_dirpath '&& ctags -R -f' tag_name '2> /dev/null &'
endfunction

augroup ctags
  autocmd!
  autocmd BufWritePost * call s:execute_ctags()
augroup END


""""""""""""""""""""""""""""""
" Settings for each langs
"
""""""""""""""""""""""""""""""
autocmd FileType c,cpp,cmake setlocal shiftwidth=2
autocmd BufEnter *.td setlocal shiftwidth=2

""""""""""""""""""""""""""""""
" For rust setting
"
""""""""""""""""""""""""""""""
let g:rustfmt_autosave = 1

""""""""""""""""""""""""""""""
" For lsp settings
"
""""""""""""""""""""""""""""""
let g:lsp_settings = {
\  'rust-analyzer': {
\    'initialization_options': {
\      'cargo': {
\        'loadOutDirsFromCheck': v:true,
\      },
\      'procMacro': {
\        'enable': v:true,
\      },
\      "diagnostics": {
\        'disabled': [
\          'unresolved-import',
\        ],
\      },
\    },
\  },
\  'clangd': {
\    'cmd': ['clangd-12']
\  },
\  'efm-langserver': {
\    'disabled': v:false
\  },
\  'pylsp-all': {
\    'workspace_config': {
\      'pylsp': {
\        'configurationSources': ['flake8']
\      }
\    }
\  },
\}

""""""""""""""""""""""""""""""
" Setting tree-sitter
"
lua <<EOF
require'nvim-treesitter.configs'.setup {
  ensure_installed = { "c", "cpp", "rust", "cmake", "llvm", "python" },
  sync_install = false,
  highlight = {
    enable = true,
  },
  indent = {
    enable = true,
  }
}
EOF

" Advanced setting for mlir tree-sitter.
"
"local parser_config = require "nvim-treesitter.parsers".get_parser_configs()
"parser_config.mlir = {
"  install_info = {
"    url = "~/.dotfiles/vim/tree-sitter-mlir/",
"    files = {"src/parser.c"},
"  },
"  filetype = "mlir",
"}
